/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MoveHeader
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function getHeadings() {
  var _a;
  const { metadataCache } = this.app;
  const workspace = this.app.workspace;
  const fileTitle = workspace.getActiveFile();
  let headings;
  if (fileTitle == null) {
    return [];
  } else {
    headings = (_a = metadataCache.getFileCache(fileTitle)) == null ? void 0 : _a.headings;
    return headings;
  }
}
function getHeaders() {
  const headings = getHeadings();
  const headers = [];
  if (!headings)
    return [];
  headings.forEach((hh) => {
    headers.push(hh.heading);
  });
  return headers;
}
var MoveHeader = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "move-to-heading",
      name: "Move text to heading",
      editorCallback: (editor, view) => {
        new HeaderModal(this.app, (value) => {
        }).open();
      }
    });
  }
};
var HeaderModal = class extends import_obsidian.SuggestModal {
  constructor(app, cb) {
    super(app);
    this.app = app;
    this.cb = cb;
  }
  getSuggestions(query) {
    const headers = getHeaders();
    return headers.filter((h) => h.toLowerCase().includes(query.toLowerCase()));
  }
  renderSuggestion(header, el) {
    el.createEl("div", { text: header });
  }
  onChooseSuggestion(header, evt) {
    this.cb(header);
    new HeaderSecondModal(this.app, (choice) => {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!view)
        return [];
      const editor = view.editor;
      const doc = view.getViewData();
      const headings = getHeadings();
      let content = "";
      const isSelection = editor.somethingSelected();
      const selection = editor.getSelection();
      const line = editor.getLine(editor.getCursor().line);
      if (isSelection) {
        content = selection;
      } else {
        content = line;
      }
      let position = [];
      let existing = "";
      let isLast = false;
      for (let i = 0; i < headings.length; i++) {
        const heading = headings[i];
        if (heading.heading == header) {
          if (i == headings.length - 1) {
            position = [heading.position.start.line, -1];
          } else {
            position = [heading.position.start.line, headings[i + 1].position.start.line];
          }
          if (heading.position.start.line == editor.lastLine()) {
            isLast = true;
            console.log("isLast is true");
          }
        }
      }
      if (position) {
        let newText = "";
        const oldText = doc.replace(content, "");
        if (isLast == false) {
          existing = doc.split("\n").slice(position[0], position[1]).join("\n");
          const matchHeader = existing.match(/#.*/);
          if (!matchHeader)
            return [];
          const matchBody = existing.replace(/#.*/, "").trimStart();
          if (choice == "prepend") {
            newText = oldText.replace(existing, matchHeader[0] + "\n\n" + content + "\n" + matchBody);
          }
          if (choice == "append") {
            console.log(`existing = ${existing} and content = ${content}`);
            newText = oldText.replace(existing, existing + "\n" + content);
          }
          view.setViewData(newText, false);
        } else {
          view.setViewData(oldText + "\n\n" + content, false);
        }
      }
    }).open();
  }
};
var HeaderSecondModal = class extends import_obsidian.SuggestModal {
  constructor(app, cb2) {
    super(app);
    this.app = app;
    this.cb2 = cb2;
  }
  getSuggestions(query) {
    const choices = ["prepend", "append"];
    return choices.filter((c) => c.toLowerCase().includes(query.toLowerCase()));
  }
  renderSuggestion(c, el) {
    el.createEl("div", { text: c });
  }
  onChooseSuggestion(c, evt) {
    this.cb2(c);
  }
};
//# sourceMappingURL=data:application/json;base64,
